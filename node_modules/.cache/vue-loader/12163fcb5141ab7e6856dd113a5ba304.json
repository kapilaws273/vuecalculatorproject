{"remainingRequest":"/Kapil/Work/Vue/vuecalculatorproject/node_modules/vue-loader/lib/index.js??vue-loader-options!/Kapil/Work/Vue/vuecalculatorproject/src/components/Ppf.vue?vue&type=style&index=0&id=2f999534&scoped=true&lang=css&","dependencies":[{"path":"/Kapil/Work/Vue/vuecalculatorproject/src/components/Ppf.vue","mtime":1577384177726},{"path":"/Kapil/Work/Vue/vuecalculatorproject/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Kapil/Work/Vue/vuecalculatorproject/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Kapil/Work/Vue/vuecalculatorproject/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Kapil/Work/Vue/vuecalculatorproject/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Kapil/Work/Vue/vuecalculatorproject/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmgzIHsKICBtYXJnaW46IDQwcHggMCAwOwp9CnVsIHsKICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7CiAgcGFkZGluZzogMDsKfQpsaSB7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogIG1hcmdpbjogMCAxMHB4Owp9CmEgewogIGNvbG9yOiAjNDJiOTgzOwp9Cg=="},{"version":3,"sources":["Ppf.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Ppf.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"Ppf\">\n    <el-form ref=\"form\" :model=\"form\" status-icon :rules=\"rules\" label-width=\"120px\">\n      <el-form-item label=\"Amount\" prop=\"amount\">\n        <el-input v-model=\"form.amount\" autocomplete=\"off\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"Frequency\" prop=\"frequency\">\n        <el-select v-model=\"form.frequency\" placeholder=\"please select your zone\">\n          <el-option label=\"Yearly\" value=\"yearly\"></el-option>\n          <el-option label=\"Monthly\" value=\"monthly\"></el-option>\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"Interest\" prop=\"interest\">\n        <el-input v-model=\"form.interest\"></el-input>\n      </el-form-item>\n      <el-form-item>\n        <el-button type=\"primary\" @click=\"submitForm('form')\">Submit</el-button>\n        <el-button>Cancel</el-button>\n      </el-form-item>\n    </el-form>\n\n    <!-- <span>Selected: {{ selected }}</span> -->\n    <el-table :data=\"result\" border style=\"width: 100%\">\n      <el-table-column prop=\"year\" label=\"Year\" width=\"180\"></el-table-column>\n      <el-table-column prop=\"openingBal\" label=\"Opening Balance\" width=\"180\"></el-table-column>\n      <el-table-column prop=\"yearlyContribution\" label=\"Yearly Contribution\" width=\"180\"></el-table-column>\n      <el-table-column prop=\"interest\" label=\"Interest\" width=\"180\"></el-table-column>\n      <el-table-column prop=\"closingBal\" label=\"Closing Balance \" width=\"180\"></el-table-column>\n    </el-table>\n  </div>\n</template>\n\n<script>\n//let resultVal = \"\";\nvar arr = [];\n\nexport default {\n  name: \"Ppf\",\n  props: {\n    msg: String\n  },\n  data() {\n    var validateFrequency = (rule, value, callback) => {\n      //alert(value);\n      if (value === \"\") {\n        callback(new Error(\"Please select Frequency\"));\n      } else {\n        // alert(this.form.frequency);\n        if (this.form.frequency !== \"\") {\n          this.$refs.form.validateField(\"amount\");\n        }\n        callback();\n      }\n    };\n    var validateAmount = (rule, value, callback) => {\n      //alert(value);\n      if (value === \"\") {\n        callback(new Error(\"Please enter Amount\"));\n      } else {\n        //alert(this.form.amount);\n        if (this.form.amount !== \"\") {\n          this.$refs.form.validateField(\"interest\");\n        }\n        callback();\n      }\n    };\n    var validateInterest = (rule, value, callback) => {\n      //alert(value);\n      if (value === \"\") {\n        callback(new Error(\"Please enter Interest\"));\n      } else {\n        //alert(this.form.frequency);\n        //if (this.form.frequency !== \"\") {\n        //this.$refs.form.validateField(\"interest\");\n        //}\n        callback();\n      }\n    };\n    return {\n      form: {\n        frequency: \"\",\n        region: \"\",\n        amount: \"\",\n        interest: \"\"\n      },\n      //selected: \"\",\n      rules: {\n        frequency: [{ validator: validateFrequency, trigger: \"blur\" }],\n        amount: [{ validator: validateAmount, trigger: \"blur\" }],\n        interest: [{ validator: validateInterest, trigger: \"blur\" }]\n      },\n      result: arr\n    };\n  },\n  methods: {\n    checkForm() {\n      if (!this.frequency) {\n        alert(\"select Frequncy\");\n      }\n      if (this.selected && this.interest && this.amount) this.calculate();\n      //return true;\n    },\n    submitForm(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          alert(\"submit!\");\n          this.calculate();\n        } else {\n          //console.log(\"error submit!!\");\n          return false;\n        }\n      });\n    },\n    calculate() {\n      this.result = [];\n      // alert(this.selected);\n      let initialBalance;\n      let interestBalance;\n      let yearlyBalance;\n      let closingBal;\n      let openingBalacne;\n      if (this.form.frequency == \"monthly\") {\n        initialBalance = 12 * this.form.amount;\n      } else {\n        initialBalance = 1 * this.form.amount;\n      }\n      let i = 0;\n      while (i < 15) {\n        if (i == 0) {\n          //this.result[i] = 0;\n          openingBalacne = 0;\n          yearlyBalance = initialBalance;\n        } else {\n          openingBalacne = this.result[i - 1].closingBal;\n        }\n        yearlyBalance = this.result[i] + initialBalance;\n        interestBalance = this.form.interest * 0.01 * yearlyBalance;\n\n        let resultVal = {\n          year: i + 1 + \"\",\n          openingBal: openingBalacne,\n          yearlyContribution: initialBalance,\n          interest: this.form.interest,\n          closingBal: closingBal\n        };\n        closingBal = yearlyBalance + interestBalance;\n        this.result[i] = resultVal;\n        //yearlyBalance + interestBalance;\n\n        i++;\n      }\n      //return result;\n    }\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>"]}]}